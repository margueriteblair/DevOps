Notes on FCC DevOps course

Unit 1 - Code Review Automation
Lesson 1  What is DevOps?
    - DevOps is a methodology that helps engineering teams build products by continuously getting user feedback.
    - Easy to integrate, continuously integrate new versions of software
    - Planning -> Coding -> Build -> Test (Both manual and automatic) -> Release -> Deploy -> Operate (Configure, scale) -> Monitor
        - Then you rinse and repeat to improve your architecture
    - DevOps is being able to build, test, release, deploy, monitor
    - DevOps engineering has a few pillars:
        - Pull request automation, deployment automation, application performance management (APM)
        - Pull request automation helps us understand the changes that we're making to a code base
        - APM is automatically detecting stuff like downtime, restarting processes etc.
    - Pull request automation:
        - Developers share code changes using git tools like github, bitbucket, etc
        - Code changes are known as a "pull request", if they're approved, they go into the main codebase
        - The goal in pull request automation is to be able to tell very quickly if a given change is good or not. Set up typo gate, stuff like this
        - Git familiarity, code review
        - What can be automated for a devOps engineer?
        - Continuous integration (CI) is per change ephemeral environments, notifications to reviewers.
            - Devs can propose changes and get reviewed and merged within 24 hours
    - Deployment automation:
        - Deploy a feature to a certain set of users as a final test before rolling it out publicly
        - Starting a new version of services without causing downtime
        - Rolling back to a prior version of a service in case something does go wrong
    - Your goal as a DevOps engineer should be to have the right tools in place that faciliate deployment without having to have too much custom code
    - Application Performance Management:
        - Metrics, Logging, Monitoring, Alerting
        - Helps us to decide if we need to automatically scale
    - Sentry, Bitrise, CircleCI
    - Terraform to automate the deployment process
    - DevOps engineering is vital as a product matures
Lesson 2 - What is Test Driven Development (TDD)?
    - TDD - Test Driven Development is a coding methodology where tests are written before code is written
    - QA, Unit Tests - making sure each piece works on its own
    - Integration tests - ensure a few components work together
    - System tests - does the process work end to end
    - Acceptance test - do end users like the product
Lesson 3 - What is Continuous Integration (CI)? w/ CI setup TUTORIAL
    - CI stands for Continuous Integration
    - Changes are automatcially pushes to a code base
    - CI is the first step in automating devOps
    - CI helps reduce customer churn
    - Branch system that most devs use:
        - Devs work on a feature branch, they'll take the prod, and make a copy for the feature branch, then they'll push back to the repository
        - The pull request is then going to yea or nay the project
    -LayerCI Example
Lesson 4 - What is code coverage?
Lesson 5 - Linting best practices
Lesson 6 - Ephemeral environments  w/ setup TUTORIAL

Unit 2 - Deployment Strategies
Lesson 7 - Virtual Machines (VMs) vs. Containers
Lesson 8 - Rolling deployments  
Lesson 9 - Blue/green deployments w/ Continuous Deployment setup TUTORIAL
Lesson 10 - What is autoscaling?
Lesson 11 - What is service discovery?

Unit 3 - Application Performance Management (APM)
Lesson 12 - What is log aggregation?
Lesson 13 - Vital production metrics